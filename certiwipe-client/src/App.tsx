import { useState } from 'react';
import './App.css';

function App() {
  const [verificationResult, setVerificationResult] = useState({ message: '', isValid: null as boolean | null });
  const [isLoading, setIsLoading] = useState(false);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = async (e) => {
      try {
        const text = e.target?.result as string;
        const certificate = JSON.parse(text);
        
        // This is the data we'll send to the backend
        const verificationPayload = {
          wipeId: certificate.wipeId,
          certificateData: certificate.certificateData,
          signature: certificate.signature,
          publicKey: certificate.publicKey
        };
        
        verifyCertificate(verificationPayload);

      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : "Failed to read or parse file.";
        setVerificationResult({ message: `❌ Error: ${errorMessage}`, isValid: false });
      }
    };
    reader.readAsText(file);
  };

  const verifyCertificate = async (payload: any) => {
    setIsLoading(true);
    setVerificationResult({ message: 'Verifying...', isValid: null });
    try {
      const response = await fetch('http://localhost:3000/verify', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      const result = await response.json();
      if (!response.ok) throw new Error(result.error || 'An unknown server error occurred.');
      setVerificationResult({ message: result.message, isValid: result.success });
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      setVerificationResult({ message: `❌ Error: ${errorMessage}`, isValid: false });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container">
      <h1>CertiWipe Certificate Verification</h1>
      <p>Upload the `.json` certificate file generated by the CertiWipe tool to verify its authenticity.</p>
      
      <div className="upload-container">
        <label htmlFor="certificateFile" className={`upload-button ${isLoading ? 'disabled' : ''}`}>
          {isLoading ? 'Verifying...' : 'Click to Upload Certificate File'}
        </label>
        <input
          type="file"
          id="certificateFile"
          accept=".json"
          onChange={handleFileChange}
          disabled={isLoading}
          style={{ display: 'none' }}
        />
      </div>

      {verificationResult.message && (
        <div 
          id="result" 
          className={verificationResult.isValid === true ? 'valid' : verificationResult.isValid === false ? 'invalid' : ''}
        >
          {verificationResult.message}
        </div>
      )}
    </div>
  );
}

export default App;